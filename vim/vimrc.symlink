if has("win32")
  let &runtimepath = substitute(&runtimepath,'\v(Documents and Settings|Users)[\/][^\/,]*[\/]\zsvimfiles','.vim','g')
endif


" Options {{{
"
set nocompatible
set encoding=utf8
set fileformats=unix,dos,mac

set expandtab
set softtabstop=-1 " sts = shiftwidth
set shiftwidth=2
set tabstop=8
set textwidth=80
set colorcolumn=+1
set cursorline

set history=200
set smarttab
set linebreak
set autoindent
set smartindent
set wrap
set modeline
set noshowmode
set nobackup
set nowritebackup
set noswapfile
set autoread
set autowrite
set hidden

set mouse=a
set scrolloff=7
set wildmode=longest:full,full
set wildmenu
set ruler
set cmdheight=1
set laststatus=2
set backspace=eol,start,indent
set whichwrap+=<,>
set wildignore+=*.o,*.so,*.dll,*.exe,*.bak,*.swp,*.class,*.pyc,*.pyd,*.pyo,*~
set wildignore+=*.zip,*.tgz,*.gz,*.bz2,*.lz,*.rar,*.7z,*.jar,*.pdf,*.mat,*.ppt
set wildignore+=*.aux,*.bbl,*.bcf,*.blg,*.fdb_latexmk,*.fls,*.out,*.toc " LaTeX

set ignorecase
set smartcase
set hlsearch
set incsearch
set lazyredraw
set magic
set showmatch
set matchtime=2

set noerrorbells
set novisualbell
set timeoutlen=500

set list
set listchars=tab:»\ ,trail:·

set spelllang=en_us
set spellfile=~/.vim/spell/en.utf-8.add

if has("win32")
  language us
endif
" }}}

" Plugin settings {{{
"
" Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = "badwolf"

" easymotion
let g:EasyMotion_smartcase = 1

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion = 1

" UltiSnips
let g:UltiSnipsExpandTrigger="<c-h>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" }}}

" Plugins {{{
"

filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'bling/vim-airline'
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'sjl/badwolf'
Plugin 'moll/vim-bbye'
Plugin 'fatih/vim-go'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

if has("python") && !has("win32")
  Plugin 'Valloric/YouCompleteMe'
endif

call vundle#end()
filetype plugin indent on

" Load prebuild ycm on windows
"   - bitbucket.org/Haroogan/vim-youcompleteme-for-windows
"   - make sure python2 is on path
if has("python") && has("win32") && isdirectory(expand("~/.vim/ycm-win"))
  set rtp+=~/.vim/ycm-win
endif
" }}}

" Key bindings {{{
"
let mapleader = ","

inoremap kj <esc>
inoremap jk <esc>

nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>sv :so $MYVIMRC<cr>
nnoremap <leader>w :w<cr>
nnoremap <silent> <leader>d :Bd<cr>
nnoremap <leader>tt :NERDTree<cr>

nmap <space> <Plug>(easymotion-s)

nnoremap <silent> <leader><space> :nohlsearch<cr>

nnoremap <silent> L :bn<cr>
nnoremap <silent> H :bp<cr>
nnoremap <m-h> <c-w>h
nnoremap <m-j> <c-w>j
nnoremap <m-k> <c-w>k
nnoremap <m-l> <c-w>l
inoremap <m-h> <esc><c-w>h
inoremap <m-j> <esc><c-w>j
inoremap <m-k> <esc><c-w>k
inoremap <m-l> <esc><c-w>l

" Trim trailing whitespace w/o affecting the search pattern register.
nnoremap <silent> <F12> :let _s=@/<bar>:%s/\s\+$//e<bar>:let @/=_s<bar>:nohl<cr>

" Reflow paragrah
nnoremap <leader>r gqip

if has("win32")
  map <F11> :call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<cr>
endif
" }}}

" Filetype settings {{{
"
" C/C++ {{{

augroup ft_c_cpp
  au!
  au FileType c,cpp
        \   setl foldmethod=marker
        \ | setl foldmarker={,}
        \ | setl shiftwidth=4
augroup END

" }}}
" Python {{{

augroup ft_python
  au!
  au FileType python
        \   setl textwidth=79
        \ | setl shiftwidth=4
augroup END

" }}}
" Git commit {{{

augroup ft_gitcommit
  au!
  au FileType gitcommit
        \   setl spell
        \ | setl colorcolumn=51,73
augroup END

" }}}
" Matlab {{{

augroup ft_matlab
  au!
  au FileType matlab
        \   setl shiftwidth=4
augroup END

" }}}
" Go {{{

augroup ft_go
  au!
  au FileType go
        \   setl textwidth=0
        \ | setl noexpandtab
        \ | setl tabstop=4
        \ | setl shiftwidth=4
        \ | nmap <buffer> <leader>m <Plug>(go-run)
augroup END

" }}}
" Tex {{{

let g:tex_flavor = 'latex'

augroup ft_tex
  au!
  au FileType tex
        \   setl cpoptions+=J
        \ | setl spell
        \ | nnoremap <buffer> <leader>m :make<cr>
augroup END

" }}}
" Help {{{

augroup ft_help
  au!
  au FileType help
        \   nnoremap <buffer> q :q<cr>
augroup END

" }}}
" }}}

" Colors and Fonts {{{
"
syntax enable
set t_Co=256
set background=dark
colorscheme badwolf

" Set extra options when running in GUI mode
if has("gui_running")
  set guioptions-=T guioptions-=t guioptions-=r guioptions-=b guioptions-=L
  set guioptions-=m
  set t_Co=256
  set guitablabel=%M\ %t
  set guifont=DejaVu_Sans_Mono_for_Powerline:h8.5:cANSI
endif
" }}}

" vim:set et sw=2 foldmethod=marker:
